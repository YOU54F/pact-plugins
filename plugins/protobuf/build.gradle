import java.nio.file.Paths

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'application'
    id 'com.google.protobuf' version '0.8.14'
    id 'groovy'
}

version = '0.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "io.grpc:grpc-protobuf:1.35.0"
    implementation "io.grpc:grpc-stub:1.35.0"
    implementation "io.grpc:grpc-netty:1.35.0"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation('io.github.microutils:kotlin-logging:2.0.10') {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation('com.michael-bull.kotlin-result:kotlin-result:1.1.11') {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation 'au.com.dius.pact.core:support:4.3.0-beta.1'
    implementation 'au.com.dius.pact.core:model:4.3.0-beta.1'

    protobuf files('../../proto/')

    testImplementation "org.codehaus.groovy:groovy:3.0.8"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.0"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'net.bytebuddy:byte-buddy:1.11.12'
    testImplementation 'org.objenesis:objenesis:3.2'
}

application {
    mainClass = 'io.pact.protobuf.plugin.AppKt'
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:3.12.0" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.35.0" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

tasks.register('unpackDist', Copy) {
    dependsOn tasks.build
    from zipTree("${project.buildDir}/distributions/pact-protobuf-plugin.zip")
    eachFile { fcd ->
        fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    }
    into file(Paths.get(System.getProperty('user.home')).resolve(".pact/plugins/protobuf-${project.version}"))
}

tasks.register('copyManifest', Copy) {
    from 'pact-plugin.json'
    into file(Paths.get(System.getProperty('user.home')).resolve(".pact/plugins/protobuf-${project.version}"))
}

tasks.register('installLocal') {
    dependsOn 'unpackDist', 'copyManifest'
}
